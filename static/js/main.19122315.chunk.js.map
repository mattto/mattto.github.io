{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Phase","kChooseFirstCard","kChooseSecondCard","kShowMismatch","kShowMatch","kEnd","Square","display","className","this","props","value","visible","showMatch","react_default","a","createElement","onClick","React","Component","Board","i","j","_this","square","squares","phase","App_Square","cols","length","push","renderSquare","rows","row","renderRow","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","elements","elementsToUse","Math","floor","numCards","deck","newDeck","chooseIndex","random","splice","shuffle","z","state","firstCardRow","firstCardCol","slice","secondCardRow","secondCardCol","otherRow","otherCol","otherValue","setState","_this3","App_Board","handleClick","App","App_Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.19122315.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst Phase = {\n  kChooseFirstCard : 'chooseFirst',\n  kChooseSecondCard : 'chooseSecond',\n  kShowMismatch: 'showMismatch',\n  kShowMatch : 'showMatch',\n  kEnd : 'end'\n};\n\nclass Square extends React.Component {\n  render() {\n    let className = 'square';\n    let display;\n    if (!this.props.value) {\n      display = '';\n      className += ' empty';\n    } else if (this.props.visible) {\n      display = this.props.value;\n      className += ' visible';\n    } else {\n      display = '?';\n    }\n\n    if (this.props.showMatch) {\n      className += ' match';\n    }\n\n    return (\n      <button className={className} onClick={this.props.onClick}>\n        {display}\n      </button>\n    );\n  }\n}\n\nclass Board extends Component {\n  renderSquare(i, j) {\n    const squares = this.props.squares;\n    const square = squares[i][j];\n    const showMatch = this.props.phase == Phase.kShowMatch && square.visible;\n    return (<Square\n              value={square.value}\n              visible={square.visible}\n              showMatch={showMatch}\n              onClick={() => this.props.onClick(i, j)}\n            />);\n  }\n\n  renderRow(i) {\n    const squares = this.props.squares;\n    const cols = [];\n    for (let j = 0; j < squares[i].length; j++) {\n      cols.push(this.renderSquare(i, j));\n    }\n\n    return (\n      <div className=\"board-row\">\n        {cols}\n      </div>\n    );\n  }\n\n  render() {\n    const status = 'Next player: X';\n    const squares = this.props.squares;\n\n    let rows = [];\n    for (let row = 0; row < squares.length; row++) {\n      rows.push(this.renderRow(row));\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n         {rows}\n      </div>\n    );\n  }\n}\n\nfunction shuffle(deck) {\n  let newDeck = [];\n  while (deck.length > 0) {\n    const chooseIndex = Math.floor(Math.random() * deck.length);\n    newDeck.push(deck.splice(chooseIndex, 1)[0]);\n  }\n  return newDeck;\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    const rows = 3;\n    const cols = 4;\n    const numCards = rows * cols;\n    const elements = \"abcdefghijklmnopqrstuvxwyz\";\n    const elementsToUse = Math.floor(numCards / 2);\n\n    let deck = [];\n    let i;\n    for (i = 0; i < elementsToUse; i++) {\n      deck.push(elements[i]);\n      deck.push(elements[i]);\n    }\n    if (deck.length == numCards - 1) {\n      deck.push(elements[i]);\n    }\n\n    deck = shuffle(deck);\n\n    let z = 0;\n    const squares = [];\n    for (i = 0; i < rows; i++) {\n      squares[i] = [];\n      for (let j = 0; j < cols; j++) {\n        squares[i].push({value: deck[z++], visible: false});\n      }\n    }\n\n    this.state = {\n      deck: deck,\n      rows: rows,\n      cols: cols,\n      squares: squares,\n      firstCardRow: -1,\n      firstCardCol: -1,\n      phase: Phase.kChooseFirstCard\n    };\n  }\n\n  handleClick(i, j) {\n    let deck = this.state.deck;\n    let rows = this.state.rows;\n    let cols = this.state.cols;\n    let squares = this.state.squares.slice();\n    let firstCardRow = this.state.firstCardRow;\n    let firstCardCol = this.state.firstCardCol;\n    let secondCardRow = this.state.secondCardRow;\n    let secondCardCol = this.state.secondCardCol;\n    let phase = this.state.phase;\n\n    switch (phase) {\n      case Phase.kChooseFirstCard:\n        if (squares[i][j].value == null)\n          return;\n        firstCardRow = i;\n        firstCardCol = j;\n        squares[i][j].visible = true;\n        phase = Phase.kChooseSecondCard;\n        break;\n\n      case Phase.kChooseSecondCard:\n        if (squares[i][j].value == null)\n          return;\n        const otherRow = firstCardRow;\n        const otherCol = firstCardCol;\n        secondCardRow = i;\n        secondCardCol = j;\n        if (i == otherRow && j == otherCol)\n          return;\n        squares[i][j].visible = true;\n        const otherValue = squares[otherRow][otherCol].value;\n        const value = squares[i][j].value;\n        if (value == otherValue) {\n          phase = Phase.kShowMatch;\n        } else {\n          phase = Phase.kShowMismatch;\n        }\n        break;\n\n      case Phase.kShowMatch:\n        squares[firstCardRow][firstCardCol].value = null;\n        squares[firstCardRow][firstCardCol].visible = false;\n        squares[secondCardRow][secondCardCol].value = null;\n        squares[secondCardRow][secondCardCol].visible = false;\n        firstCardRow = -1;\n        firstCardCol = -1;\n        secondCardRow = -1;\n        secondCardCol = -1;\n        phase = Phase.kChooseFirstCard;\n        break;\n\n      case Phase.kShowMismatch:\n        squares[firstCardRow][firstCardCol].visible = false;\n        squares[secondCardRow][secondCardCol].visible = false;\n        firstCardRow = -1;\n        firstCardCol = -1;\n        secondCardRow = -1;\n        secondCardCol = -1;\n        phase = Phase.kChooseFirstCard;\n        break;\n    }\n\n    this.setState({\n      deck: deck,\n      rows: rows,\n      cols: cols,\n      squares: squares,\n      firstCardRow: firstCardRow,\n      firstCardCol: firstCardCol,\n      secondCardRow: secondCardRow,\n      secondCardCol: secondCardCol,\n      phase: phase\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={this.state.squares}\n                 onClick={(i, j) => this.handleClick(i, j)}\n                 phase={this.state.phase}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Game />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}